#include <bits/stdc++.h>

#define each(i, c) for (auto& i : c)
#define unless(cond) if (!(cond))

using namespace std;

template<typename P, typename Q> ostream& operator << (ostream& os, pair<P, Q> p);
template<typename P, typename Q> istream& operator >> (istream& is, pair<P, Q>& p);
template<typename P, typename Q, typename R> ostream& operator << (ostream& os, tuple<P, Q, R> t) { os << "(" << get<0>(t) << "," << get<1>(t) << "," << get<2>(t) << ")"; return os; }
template<typename P, typename Q, typename R> istream& operator >> (istream& is, tuple<P, Q, R>& t) { is >> get<0>(t) >> get<1>(t) >> get<2>(t); return is; }
template<typename T> ostream& operator << (ostream& os, vector<T> v) { os << "("; for (auto& i: v) os << i << ","; os << ")"; return os; }
template<typename T> istream& operator >> (istream& is, vector<T>& v) { for (auto& i: v) is >> i; return is; }
template<typename T> ostream& operator << (ostream& os, set<T> s) { os << "set{"; for (auto& i: s) os << i << ","; os << "}"; return os; }
template<typename K, typename V> ostream& operator << (ostream& os, map<K, V> m) { os << "map{"; for (auto& i: m) os << i << ","; os << "}"; return os; }
template<typename E, size_t N> istream& operator >> (istream& is, array<E, N>& a) { for (auto& i: a) is >> i; return is; }
template<typename E, size_t N> ostream& operator << (ostream& os, array<E, N>& a) { os << "[" << N << "]{"; for (auto& i: a) os << i << ","; os << "}"; return os; }
template<typename T> ostream& operator << (ostream& os, stack<T> s) { os << "stack{"; while (s.size()) { os << s.top() << ","; s.pop(); } os << "}"; return os; }
template<typename T> ostream& operator << (ostream& os, queue<T> q) { os << "queue{"; while (q.size()) { os << q.front() << ","; q.pop(); } os << "}"; return os; }
template<typename T> ostream& operator << (ostream& os, deque<T> q) { os << "deque{"; for (int i = 0; i < q.size(); ++i) os << q[i] << ","; os << "}"; return os; }
template<typename T> ostream& operator << (ostream& os, priority_queue<T> q) { os << "heap{"; while (q.size()) { os << q.top() << ","; q.pop(); } os << "}"; return os; }
template<typename P, typename Q> ostream& operator << (ostream& os, pair<P, Q> p) { os << "(" << p.first << "," << p.second << ")"; return os; }
template<typename P, typename Q> istream& operator >> (istream& is, pair<P, Q>& p) { is >> p.first >> p.second; return is; }

template<typename T> inline T setmax(T& a, T b) { return a = std::max(a, b); }
template<typename T> inline T setmin(T& a, T b) { return a = std::min(a, b); }

__attribute__((constructor)) static void _____(void) { ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.setf(ios_base::fixed); cout.precision(15); return ; }

using lli = long long int;
using ull = unsigned long long;
using str = string;
template<typename T> using vec = vector<T>;

// constexpr lli mod = 1e9 + 7;
constexpr lli mod = 998244353;

const int h = 129;
const int w = 129;

str g[h] = {
  str("#################################################################################################################################"),
  str("#...#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#...#"),
  str("###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#"),
  str("#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#"),
  str("#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#"),
  str("#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#"),
  str("#########.#############.#########.#############.#########.#############.#########.#############.#########.#############.#########"),
  str("#...#...#.#.....#.....#.#...#...#...#.......#...#...#...#.#.....#.....#.#...#...#...#.......#...#...#...#.#.....#.....#.#...#...#"),
  str("#.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.#"),
  str("#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#"),
  str("#.#####.#####.#####.#####.#####.#.#####.#.#####.#.#####.#####.#####.#####.#####.#.#####.#.#####.#.#####.#####.#####.#####.#####.#"),
  str("#...#...#...#...#...#...#...#...#.#...#.#.#...#.#...#...#...#...#...#...#...#...#.#...#.#.#...#.#...#...#...#...#...#...#...#...#"),
  str("###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###"),
  str("#...#.....#.....#.....#.....#...#...#...#...#...#...#.....#.....#.....#.....#...#...#...#...#...#...#.....#.....#.....#.....#...#"),
  str("#.#############################.#################.#############################.#################.#############################.#"),
  str("#.#.....#.....#...#.....#.....#.#...#...#...#...#...#.....#.....#.....#.....#...#...#...#...#...#.#.....#.....#...#.....#.....#.#"),
  str("#.#.###.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.###.#.###.#.#"),
  str("#...#...#...#...#...#...#...#...#.#...#.#.#...#.#...#...#...#...#...#...#...#...#.#...#.#.#...#.#...#...#...#...#...#...#...#...#"),
  str("#####.#####.#########.#####.#####.#####.#.#####.#.#####.#####.#####.#####.#####.#.#####.#.#####.#####.#####.#########.#####.#####"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#.#.###.#.###.#.#.#.###.#.###.#.###.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.###.#.###.#.###.#.#.#.###.#.###.#.#"),
  str("#.#.....#.....#.#.#.....#.....#.#...#.......#...#...#...#.#.....#.....#.#...#...#...#.......#...#.#.....#.....#.#.#.....#.....#.#"),
  str("#.#############.#.#############.#.#############.#########.#############.#########.#############.#.#############.#.#############.#"),
  str("#...#.......#...#...#.......#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#.......#...#...#.......#...#"),
  str("###.#.#####.#.#####.#.#####.#.###.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.###.#.#####.#.#####.#.#####.#.###"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#.#####.#.#####.#.#####.#.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#.#####.#.#####.#.#####.#"),
  str("#.#...#.#.#...#.#.#...#.#.#...#.#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#.#...#.#.#...#.#.#...#.#.#...#.#"),
  str("#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#"),
  str("#...#...#...#...#...#...#...#...#.#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.#...#...#...#...#...#...#...#...#"),
  str("#################################.#############################################################.#################################"),
  str("#...#...#...#...#...#...#...#...#.#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.#...#...#...#...#...#...#...#...#"),
  str("#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#"),
  str("#.#...#.#.#...#.#.#...#.#.#...#.#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#.#...#.#.#...#.#.#...#.#.#...#.#"),
  str("#.#####.#.#####.#.#####.#.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#.#####.#.#####.#.#####.#"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("###.#.#####.#.#####.#.#####.#.###.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.###.#.#####.#.#####.#.#####.#.###"),
  str("#...#.......#...#...#.......#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#.......#...#...#.......#...#"),
  str("#.#############.#.#############.#.#############.#########.#############.#########.#############.#.#############.#.#############.#"),
  str("#.#.....#.....#.#.#.....#.....#.#...#.......#...#...#...#.#.....#.....#.#...#...#...#.......#...#.#.....#.....#.#.#.....#.....#.#"),
  str("#.#.###.#.###.#.#.#.###.#.###.#.###.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.###.#.###.#.###.#.#.#.###.#.###.#.#"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#####.#####.#########.#####.#####.#####.#.#####.#.#####.#####.#####.#####.#####.#.#####.#.#####.#####.#####.#########.#####.#####"),
  str("#...#...#...#...#...#...#...#...#.#...#.#.#...#.#...#...#...#...#...#...#...#...#.#...#.#.#...#.#...#...#...#...#...#...#...#...#"),
  str("#.#.###.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.###.#.###.#.#"),
  str("#.#.....#.....#...#.....#.....#.#...#...#...#...#...#.....#.....#.....#.....#...#...#...#...#...#.#.....#.....#...#.....#.....#.#"),
  str("#.#############################.#################.#############################.#################.#############################.#"),
  str("#...#.....#.....#.....#.....#...#...#...#...#...#...#.....#.....#.....#.....#...#...#...#...#...#...#.....#.....#.....#.....#...#"),
  str("###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###"),
  str("#...#...#...#...#...#...#...#...#.#...#.#.#...#.#...#...#...#...#...#...#...#...#.#...#.#.#...#.#...#...#...#...#...#...#...#...#"),
  str("#.#####.#####.#####.#####.#####.#.#####.#.#####.#.#####.#####.#####.#####.#####.#.#####.#.#####.#.#####.#####.#####.#####.#####.#"),
  str("#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#"),
  str("#.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.#"),
  str("#...#...#.#.....#.....#.#...#...#...#.......#...#...#...#.#.....#.....#.#...#...#...#.......#...#...#...#.#.....#.....#.#...#...#"),
  str("#########.#############.#########.#############.#########.#############.#########.#############.#########.#############.#########"),
  str("#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#...#...#"),
  str("#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#"),
  str("#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#.#...#.#"),
  str("#.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###"),
  str("#...#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#...#"),
  str("#.#############################################################################################################################.#"),
  str("#.#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#...#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.#"),
  str("#.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.#"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#########.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####"),
  str("#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#"),
  str("#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#"),
  str("#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#"),
  str("#.#############.#########.#############.#########.#############.#.#############.#########.#############.#########.#############.#"),
  str("#...#.......#...#...#...#.#.....#.....#.#...#...#...#.......#...#...#.......#...#...#...#.#.....#.....#.#...#...#...#.......#...#"),
  str("###.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.#####.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.###"),
  str("#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#"),
  str("#.#####.#.#####.#.#####.#####.#####.#####.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#####.#####.#####.#####.#.#####.#.#####.#"),
  str("#.#...#.#.#...#.#...#...#...#...#...#...#...#...#.#...#.#.#...#.#.#...#.#.#...#.#...#...#...#...#...#...#...#...#.#...#.#.#...#.#"),
  str("#.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.#"),
  str("#...#...#...#...#...#.....#.....#.....#.....#...#...#...#...#...#...#...#...#...#...#.....#.....#.....#.....#...#...#...#...#...#"),
  str("#################.#############################.#################################.#############################.#################"),
  str("#...#...#...#...#...#.....#.....#.....#.....#...#...#...#...#...#...#...#...#...#...#.....#.....#.....#.....#...#...#...#...#...#"),
  str("#.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.#.#.#.#.#"),
  str("#.#...#.#.#...#.#...#...#...#...#...#...#...#...#.#...#.#.#...#.#.#...#.#.#...#.#...#...#...#...#...#...#...#...#.#...#.#.#...#.#"),
  str("#.#####.#.#####.#.#####.#####.#####.#####.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#####.#####.#####.#####.#.#####.#.#####.#"),
  str("#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#"),
  str("###.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.#####.#.#####.#.###.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.#.###"),
  str("#...#.......#...#...#...#.#.....#.....#.#...#...#...#.......#...#...#.......#...#...#...#.#.....#.....#.#...#...#...#.......#...#"),
  str("#.#############.#########.#############.#########.#############.#.#############.#########.#############.#########.#############.#"),
  str("#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#.#.....#.....#.#...#...#.#.....#.....#.#...#...#.#.....#.....#.#"),
  str("#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.#"),
  str("#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#...#...#...#...#.#...#.#...#...#...#...#.#...#.#...#...#...#...#"),
  str("#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#########.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.#.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.#"),
  str("#.#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.#.#.....#.....#.....#.....#.....#.....#.....#.....#.....#.....#.#"),
  str("#.#############################################################.#.#############################################################.#"),
  str("#...#.....#.....#.....#.....#.......#.....#.....#.....#.....#...#...#.....#.....#.....#.....#.......#.....#.....#.....#.....#...#"),
  str("###.#.###.#.###.#.###.#.###.#.#####.#.###.#.###.#.###.#.###.#.#####.#.###.#.###.#.###.#.###.#.#####.#.###.#.###.#.###.#.###.#.###"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#.#####.#####.#####.#####.#####.#.#####.#####.#####.#####.#####.#.#####.#####.#####.#####.#####.#.#####.#####.#####.#####.#####.#"),
  str("#.#...#.#...#...#...#...#.#...#.#.#...#.#...#...#...#...#.#...#.#.#...#.#...#...#...#...#.#...#.#.#...#.#...#...#...#...#.#...#.#"),
  str("#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#"),
  str("#...#...#.#.....#.....#.#...#...#...#...#.#.....#.....#.#...#...#...#...#.#.....#.....#.#...#...#...#...#.#.....#.....#.#...#...#"),
  str("#########.#############.#################.#############.#################.#############.#################.#############.#########"),
  str("#...#...#.#.....#.....#.#...#...#...#...#.#.....#.....#.#...#...#...#...#.#.....#.....#.#...#...#...#...#.#.....#.....#.#...#...#"),
  str("#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#"),
  str("#.#...#.#...#...#...#...#.#...#.#.#...#.#...#...#...#...#.#...#.#.#...#.#...#...#...#...#.#...#.#.#...#.#...#...#...#...#.#...#.#"),
  str("#.#####.#####.#####.#####.#####.#.#####.#####.#####.#####.#####.#.#####.#####.#####.#####.#####.#.#####.#####.#####.#####.#####.#"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("###.#.###.#.###.#.###.#.###.#.#####.#.###.#.###.#.###.#.###.#.#####.#.###.#.###.#.###.#.###.#.#####.#.###.#.###.#.###.#.###.#.###"),
  str("#...#.....#.....#.....#.....#...#...#.....#.....#.....#.....#...#...#.....#.....#.....#.....#...#...#.....#.....#.....#.....#...#"),
  str("#.#############################.#.#############################.#.#############################.#.#############################.#"),
  str("#.#.....#.....#...#.....#.....#.#.#.....#.....#...#.....#.....#.#.#.....#.....#...#.....#.....#.#.#.....#.....#...#.....#.....#.#"),
  str("#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#####.#####.#########.#####.#########.#####.#########.#####.#########.#####.#########.#####.#########.#####.#########.#####.#####"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.###.#.###.#.#"),
  str("#.#.....#.....#.#.#.....#.....#.#.#.....#.....#.#.#.....#.....#.#.#.....#.....#.#.#.....#.....#.#.#.....#.....#.#.#.....#.....#.#"),
  str("#.#############.#.#############.#.#############.#.#############.#.#############.#.#############.#.#############.#.#############.#"),
  str("#...#.......#...#...#.......#...#...#.......#...#...#.......#...#...#.......#...#...#.......#...#...#.......#...#...#.......#...#"),
  str("###.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.###"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#.#####.#"),
  str("#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#"),
  str("#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#"),
  str("#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#...#"),
  str("#################################################################################################################################")
};
const pair<int, int> src = make_pair(1, 1);


str bfs(int si, int sj, int ti, int tj)
{
  assert(g[si][sj] != '#');
  assert(g[ti][tj] != '#');
  // clog << make_pair(si, sj) << "->" << make_pair(ti, tj) << endl;

  bool vis[h][w];
  for (int i = 0; i < h; ++i) {
    for (int j = 0; j < w; ++j) {
      vis[i][j] = false;
    }
  }
  vis[si][sj] = true;

  char path[h][w];
  pair<int, int> prev[h][w];

  queue<pair<int, int>> q;
  for (q.push(make_pair(si, sj)); q.size(); q.pop()) {
    auto [i, j] = q.front();
    int di[] = {0, -1, 0, +1};
    int dj[] = {+1, 0, -1, 0};
    for (int d = 0; d < 4; ++d) {
      int ni = i + di[d];
      int nj = j + dj[d];
      unless (0 <= ni && ni < h) continue;
      unless (0 <= nj && nj < w) continue;
      if (vis[ni][nj] || g[ni][nj] == '#') continue;
      q.push(make_pair(ni, nj));
      path[ni][nj] = str("RULD")[d];
      prev[ni][nj] = make_pair(i, j);
      vis[ni][nj] = true;
    }
    if (vis[ti][tj]) break;
  }
  assert(vis[ti][tj]);

  str s;
  pair<int, int> curr = make_pair(ti, tj);
  while (curr != make_pair(si, sj)) {
    s += path[curr.first][curr.second];
    curr = prev[curr.first][curr.second];
  }
  reverse(s.begin(), s.end());

  return s;
}

#include <iostream>
#include <boost/multiprecision/cpp_int.hpp>
namespace mp = boost::multiprecision;

int main(int argc, char *argv[])
{
  str s = bfs(1, 1, 1, 127);
  clog << s << endl;
  str t;
  each (c, s) {
    if (t.empty() || t.back() != c) t += c;
  }
  // each (c, t) cout << str(8, c) << endl;

  // len:3277

  mp::cpp_int x = 0;
  each (c, t) {
    if (c == 'L') x = x * 4 + 0;
    if (c == 'R') x = x * 4 + 1;
    if (c == 'U') x = x * 4 + 2;
    if (c == 'D') x = x * 4 + 3;
  }
  str u;
  while (x) {
    u += char('!' + (x % 94));
    x /= 94;
  }
  cout << u << endl;
  clog << t.size() << endl;
  clog << u.size() << endl;
  // cout << t << endl;
  return 0;
}
